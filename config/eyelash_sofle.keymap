#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE   &kp N1       &kp N2        &kp N3          &kp N4          &kp N5     &trans  &kp N6     &kp N7  &kp N8     &kp N9     &kp N0          &kp BACKSPACE
&kp TAB     &kp Q        &kp W         &kp E           &kp R           &kp T      &trans  &kp Y      &kp U   &kp I      &kp O      &kp P           &kp BSLH
&kp ESC     &mt LSHFT A  &mt LCTRL S   &mt LEFT_ALT D  &mt LEFT_GUI F  &kp G      &trans  &kp H      &kp J   &kp K      &kp L      &mt RSHFT SEMI  &kp APOS
&kp LSHFT   &kp Z        &kp X         &kp C           &kp V           &kp B      &trans  &kp N      &kp M   &kp COMMA  &kp DOT    &kp FSLH        &kp RSHFT
&kp C_MUTE  &kp LCTRL    &kp LEFT_ALT  &kp LEFT_GUI    &mo 1           &kp ENTER  &trans  &kp SPACE  &mo 2   &kp PLUS   &kp MINUS  &kp DELETE
            >;

            display-name = "layer0";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_1 {
            bindings = < 
&trans  &trans    &trans    &trans    &trans    &trans     &trans  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT  &trans  &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &trans
&trans  &trans    &trans    &trans    &trans    &trans     &trans  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &kp LBKT  &kp RBKT  &kp LBRC  &kp RBRC  &trans     &trans  &trans     &kp EQUAL  &kp PLUS   &kp MINUS  &kp UNDER  &trans
&trans  &trans    &trans    &trans    &trans    &trans     &trans  &trans     &trans     &trans     &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans          &trans        &trans          &trans           &trans       &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans        &trans  &trans          &trans        &trans          &trans           &trans       &trans
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans        &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans       &trans
&trans  &sys_reset    &trans          &bootloader   &trans        &trans        &trans  &trans          &trans        &sys_reset      &soft_off        &bootloader  &trans
&trans  &trans        &trans          &trans        &trans        &trans        &trans  &trans          &trans        &trans          &trans           &trans
            >;

            display-name = "layer2";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
